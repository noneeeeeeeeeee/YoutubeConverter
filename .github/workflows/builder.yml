name: Nightly + Draft Release

on:
  push:
    branches:
      - main

permissions:
  contents: write # required for creating/updating tags and uploading assets

jobs:
  build-nightly:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          # Ensure runtime deps for build
          pip install PyQt6 yt-dlp requests certifi

      - name: Build EXE
        shell: pwsh
        run: pyinstaller main.py --onefile --windowed --collect-data certifi

      - name: Prepare Nightly package
        id: nightly_pkg
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path YTConverter | Out-Null
          Copy-Item -Path dist\main.exe -Destination YTConverter\YoutubeConverter.exe
          # Repo version (for draft)
          if (Test-Path version.txt) {
            $repoVer = (Get-Content -Raw version.txt).Trim()
            Copy-Item version.txt YTConverter\version.txt
          } else {
            $repoVer = "0.0.0"
            '0.0.0' | Out-File -Encoding ascii YTConverter\version.txt
          }
          # Nightly version (inside nightly zip only)
          $short = $env:GITHUB_SHA.Substring(0,7)
          $nightlyVer = "Nightly Build $short"
          $nightlyVer | Out-File -Encoding ascii YTConverter\version.txt -Force
          # Copy CA bundle next to exe
          $cacert = & python -c "import certifi, sys; print(certifi.where(), end='')"
          if ($cacert -and (Test-Path $cacert)) {
            Copy-Item $cacert YTConverter\cacert.pem -Force
          }
          # Nightly zip (uses Nightly Build {sha} inside)
          $nightlyZip = "YoutubeConverter_Nightly.zip"
          Compress-Archive -Path YTConverter\* -DestinationPath $nightlyZip -Force
          # Draft zip (restore repo version)
          $repoVer | Out-File -Encoding ascii YTConverter\version.txt -Force
          $safe = $repoVer -replace '[^\w\.\-]','_'
          $verZip = "YoutubeConverter_$safe.zip"
          Compress-Archive -Path YTConverter\* -DestinationPath $verZip -Force
          # outputs
          "nightly_zip=$nightlyZip" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "nightly_ver=$nightlyVer" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "ver_zip=$verZip"         | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "ver=$repoVer"            | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload Nightly Pre-release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: nightly
          prerelease: true
          title: ${{ steps.nightly_pkg.outputs.nightly_ver }} # include short SHA
          files: |
            ${{ steps.nightly_pkg.outputs.nightly_zip }}

      - name: Update Release Draft
        id: draft
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set draft title/tag from version.txt
        uses: actions/github-script@v7
        env:
          REL_ID: ${{ steps.draft.outputs.id }}
          VER: ${{ steps.nightly_pkg.outputs.ver }}
        with:
          script: |
            const release_id = process.env.REL_ID;
            const ver = process.env.VER;
            if (!release_id || !ver) {
              core.info('Release ID or version missing; skipping rename.');
            } else {
              await github.request('PATCH /repos/{owner}/{repo}/releases/{release_id}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id,
                tag_name: `v${ver}`,
                name: `v${ver}`,
              });
              core.info(`Draft release updated to v${ver}`);
            }

      - name: Delete existing asset if present
        uses: actions/github-script@v7
        env:
          REL_ID: ${{ steps.draft.outputs.id }}
          ASSET_NAME: ${{ steps.nightly_pkg.outputs.ver_zip }}
        with:
          script: |
            const release_id = process.env.REL_ID;
            const assetName = process.env.ASSET_NAME;
            if (!release_id || !assetName) {
              core.info('Release ID or asset name missing; skip delete.');
              return;
            }
            const { data: assets } = await github.request('GET /repos/{owner}/{repo}/releases/{release_id}/assets', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id,
            });
            const match = (assets || []).find(a => a.name === assetName);
            if (match) {
              await github.request('DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: match.id,
              });
              core.info(`Deleted existing asset: ${assetName}`);
            } else {
              core.info('No existing asset to delete.');
            }

      - name: Upload asset to Draft Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft.outputs.upload_url }}
          asset_path: ${{ steps.nightly_pkg.outputs.ver_zip }}
          asset_name: ${{ steps.nightly_pkg.outputs.ver_zip }}
          asset_content_type: application/zip
